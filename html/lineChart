<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<title>LineChart</title>
<link href="../styles/demo.css" rel="stylesheet">
<script type="text/javascript" src="../js/d3.js"></script>
<style type="text/css">
	.axis path,
	.axis line {
		fill: none;
		stroke: black;
		shape-rendering: crispEdges;
	}
	.axis text {
		font-size: 10px;
	}

	.overlay {
		fill: none;
		pointer-events: all;
	}
</style>
</head>
<body>
	<div class="toolTip">
		<div class="title"></div>
		<div>
			<div class="desColor"></div>
			<div class="desText"></div>
		</div>
		<div>
			<div class="desColor"></div>
			<div class="desText"></div>
		</div>
	</div>
	<script type="text/javascript">
		var dataset = [
			{
				country : "china",
				gdp : [[2000, 123], [2001, 178], [2002, 190], [2003, 208], 
					   [2004, 276], [2005, 304], [2006, 342], [2007, 362], 
					   [2008, 405], [2009, 489], [2010, 590]]
			},
			{
				country : "ameriaca",
				gdp : [[2000, 590], [2001, 489], [2002, 405], [2003, 362], 
					   [2004, 342], [2005, 304], [2006, 276], [2007, 208], 
					   [2008, 190], [2009, 178], [2010, 123]]
			}
		];

		var width = 1000;
		var height = 500;
		var padding = {
			top : 50,
			right : 50,
			bottom : 50,
			left : 50
		};

		var gdpMax = 0;
		for (let i = 0; i < dataset.length; i++) {
			var currGdp = d3.max(dataset[i].gdp, function(d) { return d[1]; })
			if (currGdp > gdpMax) {
				gdpMax = currGdp;
			}
		}

		var xScale = d3.scale.linear()
							 .domain([2000, 2010])
							 .range([0, width - padding.left - padding.right]);

	    var yScale = d3.scale.linear()
	    					 .domain([0, gdpMax * 1.1])
	    					 .range([height - padding.top - padding.bottom, 0]);

	    var linePath = d3.svg.line()
	    					 .x(function(d) { return xScale(d[0]) })
	    					 .y(function(d) { return yScale(d[1]) });

	    var colors = [d3.rgb(0, 0, 255), d3.rgb(0, 255, 0)];

		var svg = d3.select("body")
					.append("svg")
					.attr("width", width)
					.attr("height", height);
        

		var lines = svg.selectAll("path")
					   .data(dataset)
					   .enter()
					   .append("path")
					   .attr("transform", "translate(" + padding.left + "," + padding.top + ")")
					   .attr("d", function(d) { 
					   		return linePath(d.gdp); 
					   })
					   .attr("stroke", function(d, i) {
					   		return colors[i];
					   })
					   .attr("stroke-width", "3px")
					   .attr("fill", "none");

		var rect = svg.append("rect")
					  .attr("class", "overlay")
					  .attr("x", padding.left)
					  .attr("y", padding.top)
					  .attr("width", width - padding.left - padding.right)
					  .attr("height", height - padding.top - padding.bottom)
					  .on("mouseover", function() {
					  		focusCircle.style("display", null);
					  		focusLine.style("display", null);
					  })
					  .on("mouseout", function() {
					  		focusCircle.style("display", "none");
					  		focusLine.style("display", "none");
					  })
					  .on("mousemove", mousemove);

		function mousemove() {
			var data = dataset[0].gdp;
			var mouseX = d3.mouse(this)[0] - padding.left;
			var mouseY = d3.mouse(this)[1] - padding.top;

			var x0 = xScale.invert(mouseX);
			var y0 = yScale.invert(mouseY);

			x0 = Math.round(x0);

			var bisect = d3.bisector(function(d) { return d[0] }).left;
			var index = bisect(data, x0);

			var x1 = data[index][0];
			var y1 = data[index][1];

			var focusX = xScale(x1) + padding.left;
			var focusY = yScale(y1) + padding.top;

			focusCircle.attr("transform", "translate(" + focusX + "," + focusY + ")" );

			focusCircle.select("text").text(x1 + "年的GDP: \n" + y1 + "亿美元");

			vLine.attr("x1", focusX)
				 .attr("y1", height - padding.bottom)
				 .attr("x2", focusX)
				 .attr("y2", focusY);
			hLine.attr("x1", focusX)
				 .attr("y1", focusY)
				 .attr("x2", padding.left)
				 .attr("y2", focusY);
		}

		var focusCircle = svg.append("g")
							 .attr("class", "focusCircle")
							 .style("display", "none");
		focusCircle.append("circle")
				   .attr("r", 5)
				   .attr("fill", "orange");
		focusCircle.append("text")
				   .attr("dx", 10)
				   .attr("dy", "1em");

		var focusLine = svg.append("g")
						   .attr("class", "focusLine")
						   .style("display", "none");
		var vLine = focusLine.append("line")
							 .attr("stroke", "black")
							 .attr("stroke-width", "2px");
		var hLine = focusLine.append("line")
							 .attr("stroke", "black")
							 .attr("stroke-width", "2px");

	    var xAxis = d3.svg.axis()
	    				  .scale(xScale)
	    				  .ticks(10)
	    				  .tickFormat(d3.format("d"))
	    				  .orient("bottom");

	    var yAxis = d3.svg.axis()
	    				  .scale(yScale)
	    				  .orient("left");

	    svg.append("g")
	       .attr("class", "axis")
	       .attr("transform", "translate(" + padding.left + "," + (height- padding.bottom) + ")")
	       .call(xAxis);

	    svg.append("g")
	       .attr("class", "axis")
	       .attr("transform", "translate(" + padding.left + "," + padding.top + ")")
	       .call(yAxis); 


	</script>
</body>
</html>